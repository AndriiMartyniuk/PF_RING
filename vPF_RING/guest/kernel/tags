!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
BUILD_KERNEL	Makefile	/^BUILD_KERNEL=$(shell uname -r)$/;"	m
HERE	Makefile	/^HERE=$(PWD)$/;"	m
KERNEL_VNPLUG_H	linux/vnplug.h	2;"	d
PCI_DEVICE_ID_VNPLUG_CTRL	linux/vnplug.h	120;"	d
PCI_VENDOR_ID_REDHAT_QUMRANET	linux/vnplug.h	28;"	d
VIRTIO_ID_VNPLUG_CTRL	linux/vnplug.h	122;"	d
VNPLUG_CTRL	linux/vnplug.h	6;"	d
VNPLUG_CTRL_DEVICE_NAME	linux/vnplug.h	116;"	d
VNPLUG_CTRL_MSG_FORWARD	linux/vnplug.h	139;"	d
VNPLUG_CTRL_MSG_RET_CLIENT_ERROR	linux/vnplug.h	171;"	d
VNPLUG_CTRL_MSG_RET_CLIENT_NOT_FOUND	linux/vnplug.h	170;"	d
VNPLUG_CTRL_MSG_RET_SUCCESS	linux/vnplug.h	169;"	d
VNPLUG_CTRL_STATUS	linux/vnplug.h	125;"	d
VNPLUG_CTRL_STATUS_UP	linux/vnplug.h	130;"	d
VNPLUG_CTRL_VIRTIO_N_VQS	vnplug.c	388;"	d	file:
VNPLUG_DEBUG	vnplug.c	13;"	d	file:
VNPLUG_DEVICE_NAME	linux/vnplug.h	26;"	d
VNPLUG_DEV_ID	linux/vnplug.h	29;"	d
VNPLUG_MULTI_IRQ	linux/vnplug.h	7;"	d
VNPLUG_N_MAPS	linux/vnplug.h	83;"	d
VNPLUG_PCI_MSI_BAR_ID	linux/vnplug.h	52;"	d
VNPLUG_PCI_REG_BAR_ID	linux/vnplug.h	51;"	d
VNPLUG_PCI_SHM_BAR_ID	linux/vnplug.h	53;"	d
VNPLUG_REG_OFF_DOORBELL	linux/vnplug.h	44;"	d
VNPLUG_REG_OFF_ID	linux/vnplug.h	42;"	d
VNPLUG_REG_OFF_SHMEM_SIZE	linux/vnplug.h	43;"	d
VNPLUG_REG_REGION_ID	linux/vnplug.h	46;"	d
VNPLUG_REG_REGION_SIZE	linux/vnplug.h	31;"	d
VNPLUG_REG_REGION_SIZE	linux/vnplug.h	37;"	d
VNPLUG_SHM_REGION_ID	linux/vnplug.h	47;"	d
__devinitdata	vnplug.c	/^static struct pci_device_id vnplug_pci_ids[] __devinitdata = {$/;"	v	typeref:struct:vnplug_pci_ids	file:
addr	linux/vnplug.h	/^        unsigned long           	 addr;$/;"	m	struct:vnplug_mem
async_queue	linux/vnplug.h	/^	struct fasync_struct		*async_queue;$/;"	m	struct:vnplug_device	typeref:struct:vnplug_device::fasync_struct
dev	linux/vnplug.h	/^	struct device			*dev;$/;"	m	struct:vnplug_device	typeref:struct:vnplug_device::device
dev	linux/vnplug.h	/^	struct device		*dev;$/;"	m	struct:vnplug_ctrl_info	typeref:struct:vnplug_ctrl_info::device
dev	linux/vnplug.h	/^	struct pci_dev 		*dev;$/;"	m	struct:vnplug_info	typeref:struct:vnplug_info::pci_dev
dev	linux/vnplug.h	/^	struct vnplug_device 	*dev;$/;"	m	struct:vnplug_listener	typeref:struct:vnplug_listener::vnplug_device
event	linux/vnplug.h	/^	atomic_t			 event;$/;"	m	struct:vnplug_device
event_count	linux/vnplug.h	/^	s32 			 event_count;$/;"	m	struct:vnplug_listener
event_count_s	linux/vnplug.h	/^	s32			*event_count_s;$/;"	m	struct:vnplug_listener
event_s	linux/vnplug.h	/^	atomic_t			*event_s;$/;"	m	struct:vnplug_device
g2h_vq	linux/vnplug.h	/^	struct virtqueue *g2h_vq;$/;"	m	struct:vnplug_ctrl_info	typeref:struct:vnplug_ctrl_info::virtqueue
h2g_n	linux/vnplug.h	/^	unsigned int h2g_n;$/;"	m	struct:vnplug_ctrl_info
h2g_vq	linux/vnplug.h	/^	struct virtqueue *h2g_vq;$/;"	m	struct:vnplug_ctrl_info	typeref:struct:vnplug_ctrl_info::virtqueue
id	linux/vnplug.h	/^	uint32_t 	id; \/* client id *\/$/;"	m	struct:vnplug_ctrl_msg
id	linux/vnplug.h	/^	uint32_t id;$/;"	m	struct:vnplug_ctrl_msg_hdr
info	linux/vnplug.h	/^	struct vnplug_info		*info;$/;"	m	struct:vnplug_device	typeref:struct:vnplug_device::vnplug_info
internal_addr	linux/vnplug.h	/^        void __iomem            	*internal_addr;$/;"	m	struct:vnplug_mem
irq	linux/vnplug.h	/^	long			irq; \/* should be 'unsigned int', but we need a flag for MSI-X *\/$/;"	m	struct:vnplug_info
kobj	linux/vnplug.h	/^	struct kobject 			 kobj;$/;"	m	struct:vnplug_map	typeref:struct:vnplug_map::kobject
map	linux/vnplug.h	/^        struct vnplug_map		*map;$/;"	m	struct:vnplug_mem	typeref:struct:vnplug_mem::vnplug_map
mem	linux/vnplug.h	/^	struct vnplug_mem	mem[VNPLUG_N_MAPS];$/;"	m	struct:vnplug_info	typeref:struct:vnplug_info::vnplug_mem
mem	linux/vnplug.h	/^	struct vnplug_mem 		*mem;$/;"	m	struct:vnplug_map	typeref:struct:vnplug_map::vnplug_mem
minor	linux/vnplug.h	/^	int				 minor;$/;"	m	struct:vnplug_device
msix_entries	linux/vnplug.h	/^	struct msix_entry 	*msix_entries;$/;"	m	struct:vnplug_info	typeref:struct:vnplug_info::msix_entry
msix_names	linux/vnplug.h	/^	char 			(*msix_names)[16]; \/* 16 chars for a name should be enough *\/$/;"	m	struct:vnplug_info
nvectors	linux/vnplug.h	/^	int 			nvectors;$/;"	m	struct:vnplug_info
obj-m	Makefile	/^obj-m := vnplug.o$/;"	m
padding	linux/vnplug.h	/^	uint16_t padding; \/\/I'm an alignment maniac :D$/;"	m	struct:vnplug_ctrl_virtio_config
pages	linux/vnplug.h	/^	struct page *pages;$/;"	m	struct:vnplug_ctrl_info	typeref:struct:vnplug_ctrl_info::page
payload	linux/vnplug.h	/^	char		payload[0];$/;"	m	struct:vnplug_ctrl_msg
payload_len	linux/vnplug.h	/^	uint32_t        payload_len;$/;"	m	struct:vnplug_ctrl_msg
ret_payload_len	linux/vnplug.h	/^	uint32_t        ret_payload_len; \/* return value lenght *\/$/;"	m	struct:vnplug_ctrl_msg
size	linux/vnplug.h	/^        unsigned long           	 size;$/;"	m	struct:vnplug_mem
status	linux/vnplug.h	/^	uint16_t status;$/;"	m	struct:vnplug_ctrl_virtio_config
status	linux/vnplug.h	/^	unsigned int status;$/;"	m	struct:vnplug_ctrl_info
type	linux/vnplug.h	/^	uint32_t type;$/;"	m	struct:vnplug_ctrl_msg_hdr
vdev	linux/vnplug.h	/^	struct virtio_device *vdev;$/;"	m	struct:vnplug_ctrl_info	typeref:struct:vnplug_ctrl_info::virtio_device
vnplug_class	vnplug.c	/^static struct class 			*vnplug_class;$/;"	v	typeref:struct:class	file:
vnplug_ctrl_fops	vnplug.c	/^static const struct file_operations vnplug_ctrl_fops = {$/;"	v	typeref:struct:file_operations	file:
vnplug_ctrl_free_unused_bufs	vnplug.c	/^static void vnplug_ctrl_free_unused_bufs(struct vnplug_ctrl_info *vi)$/;"	f	file:
vnplug_ctrl_info	linux/vnplug.h	/^struct vnplug_ctrl_info$/;"	s
vnplug_ctrl_info	vnplug.c	/^static struct vnplug_ctrl_info 		*vnplug_ctrl_info = NULL;$/;"	v	typeref:struct:vnplug_ctrl_info	file:
vnplug_ctrl_ioctl	vnplug.c	/^static int vnplug_ctrl_ioctl(struct inode *inode, struct file *filep, unsigned int ioctl_num, unsigned long ioctl_param)$/;"	f	file:
vnplug_ctrl_major	vnplug.c	/^static int 				 vnplug_ctrl_major;$/;"	v	file:
vnplug_ctrl_msg	linux/vnplug.h	/^struct vnplug_ctrl_msg {$/;"	s
vnplug_ctrl_msg_hdr	linux/vnplug.h	/^struct vnplug_ctrl_msg_hdr {$/;"	s
vnplug_ctrl_open	vnplug.c	/^static int vnplug_ctrl_open(struct inode *inode, struct file *filep)$/;"	f	file:
vnplug_ctrl_read	vnplug.c	/^static ssize_t vnplug_ctrl_read(struct file *filep, char __user *buf, size_t count, loff_t *ppos)$/;"	f	file:
vnplug_ctrl_release	vnplug.c	/^static int vnplug_ctrl_release(struct inode *inode, struct file *filep)$/;"	f	file:
vnplug_ctrl_virtio_add_h2g_buf	vnplug.c	/^static int vnplug_ctrl_virtio_add_h2g_buf(struct vnplug_ctrl_info *vi, gfp_t gfp)$/;"	f	file:
vnplug_ctrl_virtio_config	linux/vnplug.h	/^struct vnplug_ctrl_virtio_config$/;"	s
vnplug_ctrl_virtio_config_changed	vnplug.c	/^static void vnplug_ctrl_virtio_config_changed(struct virtio_device *vdev)$/;"	f	file:
vnplug_ctrl_virtio_driver	vnplug.c	/^static struct virtio_driver vnplug_ctrl_virtio_driver = {$/;"	v	typeref:struct:virtio_driver	file:
vnplug_ctrl_virtio_features	vnplug.c	/^static unsigned int vnplug_ctrl_virtio_features[] = {$/;"	v	file:
vnplug_ctrl_virtio_g2h_callback	vnplug.c	/^static void vnplug_ctrl_virtio_g2h_callback(struct virtqueue *svq)$/;"	f	file:
vnplug_ctrl_virtio_get_a_page	vnplug.c	/^static struct page *vnplug_ctrl_virtio_get_a_page(struct vnplug_ctrl_info *vi, gfp_t gfp_mask)$/;"	f	file:
vnplug_ctrl_virtio_give_pages	vnplug.c	/^static void vnplug_ctrl_virtio_give_pages(struct vnplug_ctrl_info *vi, struct page *page)$/;"	f	file:
vnplug_ctrl_virtio_h2g_callback	vnplug.c	/^static void vnplug_ctrl_virtio_h2g_callback(struct virtqueue *h2g_vq)$/;"	f	file:
vnplug_ctrl_virtio_id_table	vnplug.c	/^static struct virtio_device_id vnplug_ctrl_virtio_id_table[] = {$/;"	v	typeref:struct:virtio_device_id	file:
vnplug_ctrl_virtio_probe	vnplug.c	/^static int vnplug_ctrl_virtio_probe(struct virtio_device *vdev)$/;"	f	file:
vnplug_ctrl_virtio_remove	vnplug.c	/^static void __devexit vnplug_ctrl_virtio_remove(struct virtio_device *vdev)$/;"	f	file:
vnplug_ctrl_virtio_send_msg	vnplug.c	/^static int32_t vnplug_ctrl_virtio_send_msg(struct vnplug_ctrl_info *vi, uint32_t type, uint32_t id, void *payload, uint32_t payload_size, void *ret_payload, uint32_t ret_payload_size)$/;"	f	file:
vnplug_ctrl_virtio_try_fill_h2g	vnplug.c	/^static bool vnplug_ctrl_virtio_try_fill_h2g(struct vnplug_ctrl_info *vi, gfp_t gfp)$/;"	f	file:
vnplug_ctrl_virtio_update_status	vnplug.c	/^static void vnplug_ctrl_virtio_update_status(struct vnplug_ctrl_info *vi)$/;"	f	file:
vnplug_ctrl_write	vnplug.c	/^static ssize_t vnplug_ctrl_write(struct file *filep, const char __user *buf, size_t count, loff_t *ppos)$/;"	f	file:
vnplug_dev	linux/vnplug.h	/^	struct vnplug_device	*vnplug_dev;$/;"	m	struct:vnplug_info	typeref:struct:vnplug_info::vnplug_device
vnplug_device	linux/vnplug.h	/^struct vnplug_device {$/;"	s
vnplug_event_notify	vnplug.c	/^void vnplug_event_notify(struct vnplug_info *info, int irq)$/;"	f
vnplug_exit_module	vnplug.c	/^module_exit(vnplug_exit_module);$/;"	v
vnplug_exit_module	vnplug.c	/^static void __exit vnplug_exit_module(void)$/;"	f	file:
vnplug_fasync	vnplug.c	/^static int vnplug_fasync(int fd, struct file *filep, int on)$/;"	f	file:
vnplug_fops	vnplug.c	/^static const struct file_operations 	 vnplug_fops;$/;"	v	typeref:struct:file_operations	file:
vnplug_fops	vnplug.c	/^static const struct file_operations vnplug_fops = {$/;"	v	typeref:struct:file_operations	file:
vnplug_free_minor	vnplug.c	/^static void vnplug_free_minor(struct vnplug_device *idev)$/;"	f	file:
vnplug_free_msix_vectors	vnplug.c	/^static void vnplug_free_msix_vectors(struct vnplug_info *dev_info, const int max_vector)$/;"	f	file:
vnplug_get_minor	vnplug.c	/^static int vnplug_get_minor(struct vnplug_device *idev)$/;"	f	file:
vnplug_info	linux/vnplug.h	/^struct vnplug_info {$/;"	s
vnplug_init_module	vnplug.c	/^module_init(vnplug_init_module);$/;"	v
vnplug_init_module	vnplug.c	/^static int __init vnplug_init_module(void)$/;"	f	file:
vnplug_irq_handler	vnplug.c	/^static irqreturn_t vnplug_irq_handler(int irq, void *vnplug_dev)$/;"	f	file:
vnplug_listener	linux/vnplug.h	/^struct vnplug_listener {$/;"	s
vnplug_major	vnplug.c	/^static int 				 vnplug_major;$/;"	v	file:
vnplug_map	linux/vnplug.h	/^struct vnplug_map {$/;"	s
vnplug_mem	linux/vnplug.h	/^struct vnplug_mem {$/;"	s
vnplug_mmap	vnplug.c	/^static int vnplug_mmap(struct file *filep, struct vm_area_struct *vma)$/;"	f	file:
vnplug_msix_handler	vnplug.c	/^static irqreturn_t vnplug_msix_handler(int irq, void *opaque)$/;"	f	file:
vnplug_open	vnplug.c	/^static int vnplug_open(struct inode *inode, struct file *filep)$/;"	f	file:
vnplug_pci_driver	vnplug.c	/^static struct pci_driver vnplug_pci_driver = {$/;"	v	typeref:struct:pci_driver	file:
vnplug_pci_probe	vnplug.c	/^static int __devinit vnplug_pci_probe(struct pci_dev *dev, const struct pci_device_id *id)$/;"	f	file:
vnplug_pci_remove	vnplug.c	/^static void vnplug_pci_remove(struct pci_dev *dev)$/;"	f	file:
vnplug_poll	vnplug.c	/^static unsigned int vnplug_poll(struct file *filep, poll_table *wait)$/;"	f	file:
vnplug_read	vnplug.c	/^static ssize_t vnplug_read(struct file *filep, char __user *buf, size_t count, loff_t *ppos)$/;"	f	file:
vnplug_release	vnplug.c	/^static int vnplug_release(struct inode *inode, struct file *filep)$/;"	f	file:
vnplug_request_msix_vectors	vnplug.c	/^static int vnplug_request_msix_vectors(struct vnplug_info *dev_info)$/;"	f	file:
vnplug_write	vnplug.c	/^static ssize_t vnplug_write(struct file *filep, const char __user *buf, size_t count, loff_t *ppos)$/;"	f	file:
wait	linux/vnplug.h	/^	wait_queue_head_t		 wait;$/;"	m	struct:vnplug_device
wait_s	linux/vnplug.h	/^	wait_queue_head_t		*wait_s;$/;"	m	struct:vnplug_device
